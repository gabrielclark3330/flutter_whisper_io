// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<whisper_context> whisper_init_from_file(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file(
      path_model,
    );
  }

  late final _whisper_init_from_filePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file');
  late final _whisper_init_from_file = _whisper_init_from_filePtr.asFunction<
      ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_bufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('whisper_init_from_buffer');
  late final _whisper_init_from_buffer =
      _whisper_init_from_bufferPtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init(
      loader,
    );
  }

  late final _whisper_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init');
  late final _whisper_init = _whisper_initPtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_context> whisper_init_from_file_no_state(
    ffi.Pointer<ffi.Char> path_model,
  ) {
    return _whisper_init_from_file_no_state(
      path_model,
    );
  }

  late final _whisper_init_from_file_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<ffi.Char>)>>('whisper_init_from_file_no_state');
  late final _whisper_init_from_file_no_state =
      _whisper_init_from_file_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<whisper_context> whisper_init_from_buffer_no_state(
    ffi.Pointer<ffi.Void> buffer,
    int buffer_size,
  ) {
    return _whisper_init_from_buffer_no_state(
      buffer,
      buffer_size,
    );
  }

  late final _whisper_init_from_buffer_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>,
              ffi.Size)>>('whisper_init_from_buffer_no_state');
  late final _whisper_init_from_buffer_no_state =
      _whisper_init_from_buffer_no_statePtr.asFunction<
          ffi.Pointer<whisper_context> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<whisper_context> whisper_init_no_state(
    ffi.Pointer<whisper_model_loader> loader,
  ) {
    return _whisper_init_no_state(
      loader,
    );
  }

  late final _whisper_init_no_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_context> Function(
              ffi.Pointer<whisper_model_loader>)>>('whisper_init_no_state');
  late final _whisper_init_no_state = _whisper_init_no_statePtr.asFunction<
      ffi.Pointer<whisper_context> Function(
          ffi.Pointer<whisper_model_loader>)>();

  ffi.Pointer<whisper_state> whisper_init_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_init_state(
      ctx,
    );
  }

  late final _whisper_init_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_state> Function(
              ffi.Pointer<whisper_context>)>>('whisper_init_state');
  late final _whisper_init_state = _whisper_init_statePtr.asFunction<
      ffi.Pointer<whisper_state> Function(ffi.Pointer<whisper_context>)>();

  int whisper_ctx_init_openvino_encoder(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> model_path,
    ffi.Pointer<ffi.Char> device,
    ffi.Pointer<ffi.Char> cache_dir,
  ) {
    return _whisper_ctx_init_openvino_encoder(
      ctx,
      model_path,
      device,
      cache_dir,
    );
  }

  late final _whisper_ctx_init_openvino_encoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('whisper_ctx_init_openvino_encoder');
  late final _whisper_ctx_init_openvino_encoder =
      _whisper_ctx_init_openvino_encoderPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void whisper_free(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_free(
      ctx,
    );
  }

  late final _whisper_freePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_free');
  late final _whisper_free = _whisper_freePtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_free_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_free_state(
      state,
    );
  }

  late final _whisper_free_statePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_state>)>>(
      'whisper_free_state');
  late final _whisper_free_state = _whisper_free_statePtr
      .asFunction<void Function(ffi.Pointer<whisper_state>)>();

  void whisper_free_params(
    ffi.Pointer<whisper_full_params> params,
  ) {
    return _whisper_free_params(
      params,
    );
  }

  late final _whisper_free_paramsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<whisper_full_params>)>>('whisper_free_params');
  late final _whisper_free_params = _whisper_free_paramsPtr
      .asFunction<void Function(ffi.Pointer<whisper_full_params>)>();

  int whisper_pcm_to_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel(
      ctx,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_pcm_to_mel');
  late final _whisper_pcm_to_mel = _whisper_pcm_to_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_pcm_to_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_with_state(
      ctx,
      state,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_pcm_to_mel_with_state');
  late final _whisper_pcm_to_mel_with_state =
      _whisper_pcm_to_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_pcm_to_mel_phase_vocoder(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_phase_vocoder(
      ctx,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_phase_vocoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_pcm_to_mel_phase_vocoder');
  late final _whisper_pcm_to_mel_phase_vocoder =
      _whisper_pcm_to_mel_phase_vocoderPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              int, int)>();

  int whisper_pcm_to_mel_phase_vocoder_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_threads,
  ) {
    return _whisper_pcm_to_mel_phase_vocoder_with_state(
      ctx,
      state,
      samples,
      n_samples,
      n_threads,
    );
  }

  late final _whisper_pcm_to_mel_phase_vocoder_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_pcm_to_mel_phase_vocoder_with_state');
  late final _whisper_pcm_to_mel_phase_vocoder_with_state =
      _whisper_pcm_to_mel_phase_vocoder_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_set_mel(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel(
      ctx,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_melPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>,
              ffi.Int, ffi.Int)>>('whisper_set_mel');
  late final _whisper_set_mel = _whisper_set_melPtr.asFunction<
      int Function(
          ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_set_mel_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<ffi.Float> data,
    int n_len,
    int n_mel,
  ) {
    return _whisper_set_mel_with_state(
      ctx,
      state,
      data,
      n_len,
      n_mel,
    );
  }

  late final _whisper_set_mel_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_set_mel_with_state');
  late final _whisper_set_mel_with_state =
      _whisper_set_mel_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_encode(
    ffi.Pointer<whisper_context> ctx,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode(
      ctx,
      offset,
      n_threads,
    );
  }

  late final _whisper_encodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_encode');
  late final _whisper_encode = _whisper_encodePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_encode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset,
    int n_threads,
  ) {
    return _whisper_encode_with_state(
      ctx,
      state,
      offset,
      n_threads,
    );
  }

  late final _whisper_encode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_encode_with_state');
  late final _whisper_encode_with_state =
      _whisper_encode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int)>();

  int whisper_decode(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode(
      ctx,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode');
  late final _whisper_decode = _whisper_decodePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_token>,
          int, int, int)>();

  int whisper_decode_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    ffi.Pointer<whisper_token> tokens,
    int n_tokens,
    int n_past,
    int n_threads,
  ) {
    return _whisper_decode_with_state(
      ctx,
      state,
      tokens,
      n_tokens,
      n_past,
      n_threads,
    );
  }

  late final _whisper_decode_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>,
              ffi.Int,
              ffi.Int,
              ffi.Int)>>('whisper_decode_with_state');
  late final _whisper_decode_with_state =
      _whisper_decode_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              ffi.Pointer<whisper_token>, int, int, int)>();

  int whisper_tokenize(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<ffi.Char> text,
    ffi.Pointer<whisper_token> tokens,
    int n_max_tokens,
  ) {
    return _whisper_tokenize(
      ctx,
      text,
      tokens,
      n_max_tokens,
    );
  }

  late final _whisper_tokenizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<whisper_token>, ffi.Int)>>('whisper_tokenize');
  late final _whisper_tokenize = _whisper_tokenizePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<whisper_token>, int)>();

  int whisper_lang_max_id() {
    return _whisper_lang_max_id();
  }

  late final _whisper_lang_max_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('whisper_lang_max_id');
  late final _whisper_lang_max_id =
      _whisper_lang_max_idPtr.asFunction<int Function()>();

  int whisper_lang_id(
    ffi.Pointer<ffi.Char> lang,
  ) {
    return _whisper_lang_id(
      lang,
    );
  }

  late final _whisper_lang_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'whisper_lang_id');
  late final _whisper_lang_id =
      _whisper_lang_idPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> whisper_lang_str(
    int id,
  ) {
    return _whisper_lang_str(
      id,
    );
  }

  late final _whisper_lang_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_lang_str');
  late final _whisper_lang_str =
      _whisper_lang_strPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int whisper_lang_auto_detect(
    ffi.Pointer<whisper_context> ctx,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect(
      ctx,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect');
  late final _whisper_lang_auto_detect =
      _whisper_lang_auto_detectPtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, int, int,
              ffi.Pointer<ffi.Float>)>();

  int whisper_lang_auto_detect_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int offset_ms,
    int n_threads,
    ffi.Pointer<ffi.Float> lang_probs,
  ) {
    return _whisper_lang_auto_detect_with_state(
      ctx,
      state,
      offset_ms,
      n_threads,
      lang_probs,
    );
  }

  late final _whisper_lang_auto_detect_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Float>)>>('whisper_lang_auto_detect_with_state');
  late final _whisper_lang_auto_detect_with_state =
      _whisper_lang_auto_detect_with_statePtr.asFunction<
          int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
              int, int, ffi.Pointer<ffi.Float>)>();

  int whisper_n_len(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_len(
      ctx,
    );
  }

  late final _whisper_n_lenPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_len');
  late final _whisper_n_len = _whisper_n_lenPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_len_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_n_len_from_state(
      state,
    );
  }

  late final _whisper_n_len_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_n_len_from_state');
  late final _whisper_n_len_from_state = _whisper_n_len_from_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_vocab(
      ctx,
    );
  }

  late final _whisper_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_vocab');
  late final _whisper_n_vocab = _whisper_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_text_ctx');
  late final _whisper_n_text_ctx = _whisper_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_n_audio_ctx');
  late final _whisper_n_audio_ctx = _whisper_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_is_multilingual(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_is_multilingual(
      ctx,
    );
  }

  late final _whisper_is_multilingualPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_is_multilingual');
  late final _whisper_is_multilingual = _whisper_is_multilingualPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_vocab(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_vocab(
      ctx,
    );
  }

  late final _whisper_model_n_vocabPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_vocab');
  late final _whisper_model_n_vocab = _whisper_model_n_vocabPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_audio_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_ctx');
  late final _whisper_model_n_audio_ctx = _whisper_model_n_audio_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_state(
      ctx,
    );
  }

  late final _whisper_model_n_audio_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_state');
  late final _whisper_model_n_audio_state = _whisper_model_n_audio_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_head(
      ctx,
    );
  }

  late final _whisper_model_n_audio_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_head');
  late final _whisper_model_n_audio_head = _whisper_model_n_audio_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_audio_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_audio_layer(
      ctx,
    );
  }

  late final _whisper_model_n_audio_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_audio_layer');
  late final _whisper_model_n_audio_layer = _whisper_model_n_audio_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_ctx(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_ctx(
      ctx,
    );
  }

  late final _whisper_model_n_text_ctxPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_ctx');
  late final _whisper_model_n_text_ctx = _whisper_model_n_text_ctxPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_state(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_state(
      ctx,
    );
  }

  late final _whisper_model_n_text_statePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_state');
  late final _whisper_model_n_text_state = _whisper_model_n_text_statePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_head(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_head(
      ctx,
    );
  }

  late final _whisper_model_n_text_headPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_head');
  late final _whisper_model_n_text_head = _whisper_model_n_text_headPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_text_layer(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_text_layer(
      ctx,
    );
  }

  late final _whisper_model_n_text_layerPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_text_layer');
  late final _whisper_model_n_text_layer = _whisper_model_n_text_layerPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_n_mels(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_n_mels(
      ctx,
    );
  }

  late final _whisper_model_n_melsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_n_mels');
  late final _whisper_model_n_mels = _whisper_model_n_melsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_ftype(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_ftype(
      ctx,
    );
  }

  late final _whisper_model_ftypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_ftype');
  late final _whisper_model_ftype = _whisper_model_ftypePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_model_type(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type(
      ctx,
    );
  }

  late final _whisper_model_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_model_type');
  late final _whisper_model_type = _whisper_model_typePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Float> whisper_get_logits(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_get_logits(
      ctx,
    );
  }

  late final _whisper_get_logitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_context>)>>('whisper_get_logits');
  late final _whisper_get_logits = _whisper_get_logitsPtr.asFunction<
      ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Float> whisper_get_logits_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_get_logits_from_state(
      state,
    );
  }

  late final _whisper_get_logits_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Float> Function(
              ffi.Pointer<whisper_state>)>>('whisper_get_logits_from_state');
  late final _whisper_get_logits_from_state =
      _whisper_get_logits_from_statePtr.asFunction<
          ffi.Pointer<ffi.Float> Function(ffi.Pointer<whisper_state>)>();

  ffi.Pointer<ffi.Char> whisper_token_to_str(
    ffi.Pointer<whisper_context> ctx,
    int token,
  ) {
    return _whisper_token_to_str(
      ctx,
      token,
    );
  }

  late final _whisper_token_to_strPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              whisper_token)>>('whisper_token_to_str');
  late final _whisper_token_to_str = _whisper_token_to_strPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_model_type_readable(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_model_type_readable(
      ctx,
    );
  }

  late final _whisper_model_type_readablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>)>>('whisper_model_type_readable');
  late final _whisper_model_type_readable =
      _whisper_model_type_readablePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_eot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_eot(
      ctx,
    );
  }

  late final _whisper_token_eotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_eot');
  late final _whisper_token_eot = _whisper_token_eotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_sot(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_sot(
      ctx,
    );
  }

  late final _whisper_token_sotPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_sot');
  late final _whisper_token_sot = _whisper_token_sotPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_solm(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_solm(
      ctx,
    );
  }

  late final _whisper_token_solmPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_solm');
  late final _whisper_token_solm = _whisper_token_solmPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_prev(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_prev(
      ctx,
    );
  }

  late final _whisper_token_prevPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_prev');
  late final _whisper_token_prev = _whisper_token_prevPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_nosp(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_nosp(
      ctx,
    );
  }

  late final _whisper_token_nospPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_nosp');
  late final _whisper_token_nosp = _whisper_token_nospPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_not(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_not(
      ctx,
    );
  }

  late final _whisper_token_notPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_not');
  late final _whisper_token_not = _whisper_token_notPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_beg(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_beg(
      ctx,
    );
  }

  late final _whisper_token_begPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_beg');
  late final _whisper_token_beg = _whisper_token_begPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_lang(
    ffi.Pointer<whisper_context> ctx,
    int lang_id,
  ) {
    return _whisper_token_lang(
      ctx,
      lang_id,
    );
  }

  late final _whisper_token_langPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_token_lang');
  late final _whisper_token_lang = _whisper_token_langPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_token_translate(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_translate(
      ctx,
    );
  }

  late final _whisper_token_translatePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_translate');
  late final _whisper_token_translate = _whisper_token_translatePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_token_transcribe(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_token_transcribe(
      ctx,
    );
  }

  late final _whisper_token_transcribePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(
              ffi.Pointer<whisper_context>)>>('whisper_token_transcribe');
  late final _whisper_token_transcribe = _whisper_token_transcribePtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  void whisper_print_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_print_timings(
      ctx,
    );
  }

  late final _whisper_print_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_print_timings');
  late final _whisper_print_timings = _whisper_print_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  void whisper_reset_timings(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_reset_timings(
      ctx,
    );
  }

  late final _whisper_reset_timingsPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<whisper_context>)>>(
      'whisper_reset_timings');
  late final _whisper_reset_timings = _whisper_reset_timingsPtr
      .asFunction<void Function(ffi.Pointer<whisper_context>)>();

  ffi.Pointer<ffi.Char> whisper_print_system_info() {
    return _whisper_print_system_info();
  }

  late final _whisper_print_system_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'whisper_print_system_info');
  late final _whisper_print_system_info = _whisper_print_system_infoPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<whisper_full_params> whisper_full_default_params_by_ref(
    int strategy,
  ) {
    return _whisper_full_default_params_by_ref(
      strategy,
    );
  }

  late final _whisper_full_default_params_by_refPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<whisper_full_params> Function(
              ffi.Int32)>>('whisper_full_default_params_by_ref');
  late final _whisper_full_default_params_by_ref =
      _whisper_full_default_params_by_refPtr
          .asFunction<ffi.Pointer<whisper_full_params> Function(int)>();

  whisper_full_params whisper_full_default_params(
    int strategy,
  ) {
    return _whisper_full_default_params(
      strategy,
    );
  }

  late final _whisper_full_default_paramsPtr =
      _lookup<ffi.NativeFunction<whisper_full_params Function(ffi.Int32)>>(
          'whisper_full_default_params');
  late final _whisper_full_default_params = _whisper_full_default_paramsPtr
      .asFunction<whisper_full_params Function(int)>();

  int whisper_full(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full(
      ctx,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_fullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_context>, whisper_full_params,
              ffi.Pointer<ffi.Float>, ffi.Int)>>('whisper_full');
  late final _whisper_full = _whisper_fullPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params,
          ffi.Pointer<ffi.Float>, int)>();

  int whisper_full_with_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
  ) {
    return _whisper_full_with_state(
      ctx,
      state,
      params,
      samples,
      n_samples,
    );
  }

  late final _whisper_full_with_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              whisper_full_params,
              ffi.Pointer<ffi.Float>,
              ffi.Int)>>('whisper_full_with_state');
  late final _whisper_full_with_state = _whisper_full_with_statePtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, ffi.Pointer<whisper_state>,
          whisper_full_params, ffi.Pointer<ffi.Float>, int)>();

  int whisper_full_parallel(
    ffi.Pointer<whisper_context> ctx,
    whisper_full_params params,
    ffi.Pointer<ffi.Float> samples,
    int n_samples,
    int n_processors,
  ) {
    return _whisper_full_parallel(
      ctx,
      params,
      samples,
      n_samples,
      n_processors,
    );
  }

  late final _whisper_full_parallelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>,
              whisper_full_params,
              ffi.Pointer<ffi.Float>,
              ffi.Int,
              ffi.Int)>>('whisper_full_parallel');
  late final _whisper_full_parallel = _whisper_full_parallelPtr.asFunction<
      int Function(ffi.Pointer<whisper_context>, whisper_full_params,
          ffi.Pointer<ffi.Float>, int, int)>();

  int whisper_full_n_segments(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_n_segments(
      ctx,
    );
  }

  late final _whisper_full_n_segmentsPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_n_segments');
  late final _whisper_full_n_segments = _whisper_full_n_segmentsPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_full_n_segments_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_n_segments_from_state(
      state,
    );
  }

  late final _whisper_full_n_segments_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_n_segments_from_state');
  late final _whisper_full_n_segments_from_state =
      _whisper_full_n_segments_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_full_lang_id(
    ffi.Pointer<whisper_context> ctx,
  ) {
    return _whisper_full_lang_id(
      ctx,
    );
  }

  late final _whisper_full_lang_idPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_context>)>>(
      'whisper_full_lang_id');
  late final _whisper_full_lang_id = _whisper_full_lang_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>)>();

  int whisper_full_lang_id_from_state(
    ffi.Pointer<whisper_state> state,
  ) {
    return _whisper_full_lang_id_from_state(
      state,
    );
  }

  late final _whisper_full_lang_id_from_statePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<whisper_state>)>>(
          'whisper_full_lang_id_from_state');
  late final _whisper_full_lang_id_from_state =
      _whisper_full_lang_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>)>();

  int whisper_full_get_segment_t0(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t0');
  late final _whisper_full_get_segment_t0 = _whisper_full_get_segment_t0Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t0_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t0_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t0_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t0_from_state');
  late final _whisper_full_get_segment_t0_from_state =
      _whisper_full_get_segment_t0_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  int whisper_full_get_segment_t1(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_t1');
  late final _whisper_full_get_segment_t1 = _whisper_full_get_segment_t1Ptr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_get_segment_t1_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_t1_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_t1_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_t1_from_state');
  late final _whisper_full_get_segment_t1_from_state =
      _whisper_full_get_segment_t1_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  bool whisper_full_get_segment_speaker_turn_next(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_speaker_turn_next(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_speaker_turn_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_speaker_turn_next');
  late final _whisper_full_get_segment_speaker_turn_next =
      _whisper_full_get_segment_speaker_turn_nextPtr
          .asFunction<bool Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_segment_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Int)>>('whisper_full_get_segment_text');
  late final _whisper_full_get_segment_text =
      _whisper_full_get_segment_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_segment_text_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_get_segment_text_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_get_segment_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_get_segment_text_from_state');
  late final _whisper_full_get_segment_text_from_state =
      _whisper_full_get_segment_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_state>, int)>();

  int whisper_full_n_tokens(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
  ) {
    return _whisper_full_n_tokens(
      ctx,
      i_segment,
    );
  }

  late final _whisper_full_n_tokensPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<whisper_context>, ffi.Int)>>('whisper_full_n_tokens');
  late final _whisper_full_n_tokens = _whisper_full_n_tokensPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int)>();

  int whisper_full_n_tokens_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
  ) {
    return _whisper_full_n_tokens_from_state(
      state,
      i_segment,
    );
  }

  late final _whisper_full_n_tokens_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<whisper_state>,
              ffi.Int)>>('whisper_full_n_tokens_from_state');
  late final _whisper_full_n_tokens_from_state =
      _whisper_full_n_tokens_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_token_text(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text');
  late final _whisper_full_get_token_text =
      _whisper_full_get_token_textPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>, int, int)>();

  ffi.Pointer<ffi.Char> whisper_full_get_token_text_from_state(
    ffi.Pointer<whisper_context> ctx,
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_text_from_state(
      ctx,
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_text_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>,
              ffi.Int,
              ffi.Int)>>('whisper_full_get_token_text_from_state');
  late final _whisper_full_get_token_text_from_state =
      _whisper_full_get_token_text_from_statePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<whisper_context>,
              ffi.Pointer<whisper_state>, int, int)>();

  int whisper_full_get_token_id(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_idPtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id');
  late final _whisper_full_get_token_id = _whisper_full_get_token_idPtr
      .asFunction<int Function(ffi.Pointer<whisper_context>, int, int)>();

  int whisper_full_get_token_id_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_id_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_id_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_id_from_state');
  late final _whisper_full_get_token_id_from_state =
      _whisper_full_get_token_id_from_statePtr
          .asFunction<int Function(ffi.Pointer<whisper_state>, int, int)>();

  whisper_token_data whisper_full_get_token_data(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_dataPtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data');
  late final _whisper_full_get_token_data =
      _whisper_full_get_token_dataPtr.asFunction<
          whisper_token_data Function(
              ffi.Pointer<whisper_context>, int, int)>();

  whisper_token_data whisper_full_get_token_data_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_data_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_data_from_statePtr = _lookup<
      ffi.NativeFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_data_from_state');
  late final _whisper_full_get_token_data_from_state =
      _whisper_full_get_token_data_from_statePtr.asFunction<
          whisper_token_data Function(ffi.Pointer<whisper_state>, int, int)>();

  double whisper_full_get_token_p(
    ffi.Pointer<whisper_context> ctx,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p(
      ctx,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_context>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p');
  late final _whisper_full_get_token_p = _whisper_full_get_token_pPtr
      .asFunction<double Function(ffi.Pointer<whisper_context>, int, int)>();

  double whisper_full_get_token_p_from_state(
    ffi.Pointer<whisper_state> state,
    int i_segment,
    int i_token,
  ) {
    return _whisper_full_get_token_p_from_state(
      state,
      i_segment,
      i_token,
    );
  }

  late final _whisper_full_get_token_p_from_statePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<whisper_state>, ffi.Int,
              ffi.Int)>>('whisper_full_get_token_p_from_state');
  late final _whisper_full_get_token_p_from_state =
      _whisper_full_get_token_p_from_statePtr
          .asFunction<double Function(ffi.Pointer<whisper_state>, int, int)>();

  /// /////////////////////////////////////////////////////////////////////////
  int whisper_bench_memcpy(
    int n_threads,
  ) {
    return _whisper_bench_memcpy(
      n_threads,
    );
  }

  late final _whisper_bench_memcpyPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_memcpy');
  late final _whisper_bench_memcpy =
      _whisper_bench_memcpyPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_memcpy_str(
    int n_threads,
  ) {
    return _whisper_bench_memcpy_str(
      n_threads,
    );
  }

  late final _whisper_bench_memcpy_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_memcpy_str');
  late final _whisper_bench_memcpy_str = _whisper_bench_memcpy_strPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  int whisper_bench_ggml_mul_mat(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_matPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat');
  late final _whisper_bench_ggml_mul_mat =
      _whisper_bench_ggml_mul_matPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Char> whisper_bench_ggml_mul_mat_str(
    int n_threads,
  ) {
    return _whisper_bench_ggml_mul_mat_str(
      n_threads,
    );
  }

  late final _whisper_bench_ggml_mul_mat_strPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'whisper_bench_ggml_mul_mat_str');
  late final _whisper_bench_ggml_mul_mat_str =
      _whisper_bench_ggml_mul_mat_strPtr
          .asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void whisper_set_log_callback(
    whisper_log_callback callback,
  ) {
    return _whisper_set_log_callback(
      callback,
    );
  }

  late final _whisper_set_log_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(whisper_log_callback)>>(
          'whisper_set_log_callback');
  late final _whisper_set_log_callback = _whisper_set_log_callbackPtr
      .asFunction<void Function(whisper_log_callback)>();

  ffi.Pointer<SRC_STATE> src_new(
    int converter_type,
    int channels,
    ffi.Pointer<ffi.Int> error,
  ) {
    return _src_new(
      converter_type,
      channels,
      error,
    );
  }

  late final _src_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SRC_STATE> Function(
              ffi.Int, ffi.Int, ffi.Pointer<ffi.Int>)>>('src_new');
  late final _src_new = _src_newPtr.asFunction<
      ffi.Pointer<SRC_STATE> Function(int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<SRC_STATE> src_clone(
    ffi.Pointer<SRC_STATE> orig,
    ffi.Pointer<ffi.Int> error,
  ) {
    return _src_clone(
      orig,
      error,
    );
  }

  late final _src_clonePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SRC_STATE> Function(
              ffi.Pointer<SRC_STATE>, ffi.Pointer<ffi.Int>)>>('src_clone');
  late final _src_clone = _src_clonePtr.asFunction<
      ffi.Pointer<SRC_STATE> Function(
          ffi.Pointer<SRC_STATE>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<SRC_STATE> src_callback_new(
    src_callback_t func,
    int converter_type,
    int channels,
    ffi.Pointer<ffi.Int> error,
    ffi.Pointer<ffi.Void> cb_data,
  ) {
    return _src_callback_new(
      func,
      converter_type,
      channels,
      error,
      cb_data,
    );
  }

  late final _src_callback_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SRC_STATE> Function(
              src_callback_t,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Void>)>>('src_callback_new');
  late final _src_callback_new = _src_callback_newPtr.asFunction<
      ffi.Pointer<SRC_STATE> Function(src_callback_t, int, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<SRC_STATE> src_delete(
    ffi.Pointer<SRC_STATE> state,
  ) {
    return _src_delete(
      state,
    );
  }

  late final _src_deletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SRC_STATE> Function(
              ffi.Pointer<SRC_STATE>)>>('src_delete');
  late final _src_delete = _src_deletePtr
      .asFunction<ffi.Pointer<SRC_STATE> Function(ffi.Pointer<SRC_STATE>)>();

  int src_process(
    ffi.Pointer<SRC_STATE> state,
    ffi.Pointer<SRC_DATA> data,
  ) {
    return _src_process(
      state,
      data,
    );
  }

  late final _src_processPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SRC_STATE>, ffi.Pointer<SRC_DATA>)>>('src_process');
  late final _src_process = _src_processPtr.asFunction<
      int Function(ffi.Pointer<SRC_STATE>, ffi.Pointer<SRC_DATA>)>();

  int src_callback_read(
    ffi.Pointer<SRC_STATE> state,
    double src_ratio,
    int frames,
    ffi.Pointer<ffi.Float> data,
  ) {
    return _src_callback_read(
      state,
      src_ratio,
      frames,
      data,
    );
  }

  late final _src_callback_readPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<SRC_STATE>, ffi.Double, ffi.Long,
              ffi.Pointer<ffi.Float>)>>('src_callback_read');
  late final _src_callback_read = _src_callback_readPtr.asFunction<
      int Function(
          ffi.Pointer<SRC_STATE>, double, int, ffi.Pointer<ffi.Float>)>();

  int src_simple(
    ffi.Pointer<SRC_DATA> data,
    int converter_type,
    int channels,
  ) {
    return _src_simple(
      data,
      converter_type,
      channels,
    );
  }

  late final _src_simplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SRC_DATA>, ffi.Int, ffi.Int)>>('src_simple');
  late final _src_simple = _src_simplePtr
      .asFunction<int Function(ffi.Pointer<SRC_DATA>, int, int)>();

  ffi.Pointer<ffi.Char> src_get_name(
    int converter_type,
  ) {
    return _src_get_name(
      converter_type,
    );
  }

  late final _src_get_namePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'src_get_name');
  late final _src_get_name =
      _src_get_namePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> src_get_description(
    int converter_type,
  ) {
    return _src_get_description(
      converter_type,
    );
  }

  late final _src_get_descriptionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'src_get_description');
  late final _src_get_description =
      _src_get_descriptionPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> src_get_version() {
    return _src_get_version();
  }

  late final _src_get_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'src_get_version');
  late final _src_get_version =
      _src_get_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int src_set_ratio(
    ffi.Pointer<SRC_STATE> state,
    double new_ratio,
  ) {
    return _src_set_ratio(
      state,
      new_ratio,
    );
  }

  late final _src_set_ratioPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SRC_STATE>, ffi.Double)>>('src_set_ratio');
  late final _src_set_ratio = _src_set_ratioPtr
      .asFunction<int Function(ffi.Pointer<SRC_STATE>, double)>();

  int src_get_channels(
    ffi.Pointer<SRC_STATE> state,
  ) {
    return _src_get_channels(
      state,
    );
  }

  late final _src_get_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SRC_STATE>)>>(
          'src_get_channels');
  late final _src_get_channels =
      _src_get_channelsPtr.asFunction<int Function(ffi.Pointer<SRC_STATE>)>();

  int src_reset(
    ffi.Pointer<SRC_STATE> state,
  ) {
    return _src_reset(
      state,
    );
  }

  late final _src_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SRC_STATE>)>>(
          'src_reset');
  late final _src_reset =
      _src_resetPtr.asFunction<int Function(ffi.Pointer<SRC_STATE>)>();

  int src_is_valid_ratio(
    double ratio,
  ) {
    return _src_is_valid_ratio(
      ratio,
    );
  }

  late final _src_is_valid_ratioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>(
          'src_is_valid_ratio');
  late final _src_is_valid_ratio =
      _src_is_valid_ratioPtr.asFunction<int Function(double)>();

  int src_error(
    ffi.Pointer<SRC_STATE> state,
  ) {
    return _src_error(
      state,
    );
  }

  late final _src_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SRC_STATE>)>>(
          'src_error');
  late final _src_error =
      _src_errorPtr.asFunction<int Function(ffi.Pointer<SRC_STATE>)>();

  ffi.Pointer<ffi.Char> src_strerror(
    int error,
  ) {
    return _src_strerror(
      error,
    );
  }

  late final _src_strerrorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'src_strerror');
  late final _src_strerror =
      _src_strerrorPtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  void src_short_to_float_array(
    ffi.Pointer<ffi.Short> in1,
    ffi.Pointer<ffi.Float> out,
    int len,
  ) {
    return _src_short_to_float_array(
      in1,
      out,
      len,
    );
  }

  late final _src_short_to_float_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>,
              ffi.Int)>>('src_short_to_float_array');
  late final _src_short_to_float_array =
      _src_short_to_float_arrayPtr.asFunction<
          void Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>, int)>();

  void src_float_to_short_array(
    ffi.Pointer<ffi.Float> in1,
    ffi.Pointer<ffi.Short> out,
    int len,
  ) {
    return _src_float_to_short_array(
      in1,
      out,
      len,
    );
  }

  late final _src_float_to_short_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Short>,
              ffi.Int)>>('src_float_to_short_array');
  late final _src_float_to_short_array =
      _src_float_to_short_arrayPtr.asFunction<
          void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Short>, int)>();

  void src_int_to_float_array(
    ffi.Pointer<ffi.Int> in1,
    ffi.Pointer<ffi.Float> out,
    int len,
  ) {
    return _src_int_to_float_array(
      in1,
      out,
      len,
    );
  }

  late final _src_int_to_float_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Float>,
              ffi.Int)>>('src_int_to_float_array');
  late final _src_int_to_float_array = _src_int_to_float_arrayPtr.asFunction<
      void Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Float>, int)>();

  void src_float_to_int_array(
    ffi.Pointer<ffi.Float> in1,
    ffi.Pointer<ffi.Int> out,
    int len,
  ) {
    return _src_float_to_int_array(
      in1,
      out,
      len,
    );
  }

  late final _src_float_to_int_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>,
              ffi.Int)>>('src_float_to_int_array');
  late final _src_float_to_int_array = _src_float_to_int_arrayPtr.asFunction<
      void Function(ffi.Pointer<ffi.Float>, ffi.Pointer<ffi.Int>, int)>();
}

final class __mbstate_t extends ffi.Union {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Char> __mbstate8;

  @ffi.LongLong()
  external int _mbstateL;
}

final class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi
          .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

final class _opaque_pthread_attr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_cond_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_condattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutex_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_mutexattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_once_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlock_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([192])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_rwlockattr_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Char> __opaque;
}

final class _opaque_pthread_t extends ffi.Struct {
  @ffi.Long()
  external int __sig;

  external ffi.Pointer<__darwin_pthread_handler_rec> __cleanup_stack;

  @ffi.Array.multi([8176])
  external ffi.Array<ffi.Char> __opaque;
}

final class whisper_context extends ffi.Opaque {}

final class whisper_state extends ffi.Opaque {}

final class whisper_full_params extends ffi.Struct {
  @ffi.Int32()
  external int strategy;

  @ffi.Int()
  external int n_threads;

  @ffi.Int()
  external int n_max_text_ctx;

  @ffi.Int()
  external int offset_ms;

  @ffi.Int()
  external int duration_ms;

  @ffi.Bool()
  external bool translate;

  @ffi.Bool()
  external bool no_context;

  @ffi.Bool()
  external bool single_segment;

  @ffi.Bool()
  external bool print_special;

  @ffi.Bool()
  external bool print_progress;

  @ffi.Bool()
  external bool print_realtime;

  @ffi.Bool()
  external bool print_timestamps;

  @ffi.Bool()
  external bool token_timestamps;

  @ffi.Float()
  external double thold_pt;

  @ffi.Float()
  external double thold_ptsum;

  @ffi.Int()
  external int max_len;

  @ffi.Bool()
  external bool split_on_word;

  @ffi.Int()
  external int max_tokens;

  @ffi.Bool()
  external bool speed_up;

  @ffi.Int()
  external int audio_ctx;

  @ffi.Bool()
  external bool tdrz_enable;

  external ffi.Pointer<ffi.Char> initial_prompt;

  external ffi.Pointer<whisper_token> prompt_tokens;

  @ffi.Int()
  external int prompt_n_tokens;

  external ffi.Pointer<ffi.Char> language;

  @ffi.Bool()
  external bool detect_language;

  @ffi.Bool()
  external bool suppress_blank;

  @ffi.Bool()
  external bool suppress_non_speech_tokens;

  @ffi.Float()
  external double temperature;

  @ffi.Float()
  external double max_initial_ts;

  @ffi.Float()
  external double length_penalty;

  @ffi.Float()
  external double temperature_inc;

  @ffi.Float()
  external double entropy_thold;

  @ffi.Float()
  external double logprob_thold;

  @ffi.Float()
  external double no_speech_thold;

  external UnnamedStruct1 greedy;

  external UnnamedStruct2 beam_search;

  external whisper_new_segment_callback new_segment_callback;

  external ffi.Pointer<ffi.Void> new_segment_callback_user_data;

  external whisper_progress_callback progress_callback;

  external ffi.Pointer<ffi.Void> progress_callback_user_data;

  external whisper_encoder_begin_callback encoder_begin_callback;

  external ffi.Pointer<ffi.Void> encoder_begin_callback_user_data;

  external whisper_logits_filter_callback logits_filter_callback;

  external ffi.Pointer<ffi.Void> logits_filter_callback_user_data;
}

/// /////////////////////////////////////////////////////////////////////////
abstract class whisper_sampling_strategy {
  static const int WHISPER_SAMPLING_GREEDY = 0;
  static const int WHISPER_SAMPLING_BEAM_SEARCH = 1;
}

typedef whisper_token = ffi.Int;

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.Int()
  external int best_of;
}

final class UnnamedStruct2 extends ffi.Struct {
  @ffi.Int()
  external int beam_size;

  @ffi.Float()
  external double patience;
}

typedef whisper_new_segment_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Int n_new,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef whisper_progress_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Int progress,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef whisper_encoder_begin_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Pointer<ffi.Void> user_data)>>;
typedef whisper_logits_filter_callback = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Pointer<whisper_context> ctx,
            ffi.Pointer<whisper_state> state,
            ffi.Pointer<whisper_token_data> tokens,
            ffi.Int n_tokens,
            ffi.Pointer<ffi.Float> logits,
            ffi.Pointer<ffi.Void> user_data)>>;

final class whisper_token_data extends ffi.Struct {
  @whisper_token()
  external int id;

  @whisper_token()
  external int tid;

  @ffi.Float()
  external double p;

  @ffi.Float()
  external double plog;

  @ffi.Float()
  external double pt;

  @ffi.Float()
  external double ptsum;

  @ffi.Int64()
  external int t0;

  @ffi.Int64()
  external int t1;

  @ffi.Float()
  external double vlen;
}

final class whisper_model_loader extends ffi.Struct {
  external ffi.Pointer<ffi.Void> context;

  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void> ctx,
              ffi.Pointer<ffi.Void> output, ffi.Size read_size)>> read;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void> ctx)>> eof;

  external ffi.Pointer<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ctx)>> close;
}

typedef whisper_log_callback = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char> line)>>;

final class SRC_STATE_tag extends ffi.Opaque {}

final class SRC_DATA extends ffi.Struct {
  external ffi.Pointer<ffi.Float> data_in;

  external ffi.Pointer<ffi.Float> data_out;

  @ffi.Long()
  external int input_frames;

  @ffi.Long()
  external int output_frames;

  @ffi.Long()
  external int input_frames_used;

  @ffi.Long()
  external int output_frames_gen;

  @ffi.Int()
  external int end_of_input;

  @ffi.Double()
  external double src_ratio;
}

typedef SRC_STATE = SRC_STATE_tag;
typedef src_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Long Function(ffi.Pointer<ffi.Void> cb_data,
            ffi.Pointer<ffi.Pointer<ffi.Float>> data)>>;

const int SRC_SINC_BEST_QUALITY = 0;

const int SRC_SINC_MEDIUM_QUALITY = 1;

const int SRC_SINC_FASTEST = 2;

const int SRC_ZERO_ORDER_HOLD = 3;

const int SRC_LINEAR = 4;

const int __DARWIN_ONLY_64_BIT_INO_T = 1;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __has_ptrcheck = 0;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int __bool_true_false_are_defined = 1;

const int true1 = 1;

const int false1 = 0;

const int WHISPER_SAMPLE_RATE = 16000;

const int WHISPER_N_FFT = 400;

const int WHISPER_N_MEL = 80;

const int WHISPER_HOP_LENGTH = 160;

const int WHISPER_CHUNK_SIZE = 30;
